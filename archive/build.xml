<?xml version="1.0" encoding="UTF-8"?><!-- You may freely edit this file. See commented blocks below for --><!-- some examples of how to customize the build. --><!-- (If you delete it and reopen the particletrieur it will be recreated.) --><!-- By default, only the Clean and Build commands use this build script. -->
<project name="ParticleTrieur" default="default" basedir=".." xmlns:fx="javafx:com.sun.javafx.tools.ant">
    <description>Builds, tests, and runs the project ParticleTrieur.</description>
    <import file="nbproject/build-impl.xml"/>
    
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>
    <condition property="isUnix">
        <os family="unix" />
    </condition>   
         
    <target name="-copy-win" depends="-jfx-copylibs" if="${isWindows}">
        <echo message="copying windows libraries"/>
        <copy todir="${basedir}/dist/lib"> 
            <fileset dir="${basedir}/native" includes="**/*.dll"/>
        </copy> 
    </target>  
      
    <target name="-copy-mac" depends="-jfx-copylibs" if="${isMac}">
        <echo message="copying mac libraries"/>
        <copy todir="${basedir}/dist/lib"> 
            <fileset dir="${basedir}/native" includes="**/*.dylib"/>
            <fileset dir="${basedir}/native" includes="**/*.so"/>
        </copy> 
    </target>    
    <target depends="-jfx-copylibs,-rebase-libs,jfx-deployment,-copy-win,-copy-mac" name="-post-jar"/>
    <target depends="-copy-win,-copy-mac" name="-pre-jfx-deploy"/>
    
    <target name="-pre-init">
    <macrodef name="deploy-deploy">
        <sequential>
            <antcall target="-pre-jfx-deploy"/>
            <antcall target="-call-pre-jfx-native"/>
            <echo message="javafx.ant.classpath = ${javafx.ant.classpath}" level="verbose"/>
            <typedef name="fx_deploy" classname="com.sun.javafx.tools.ant.DeployFXTask" classpath="${javafx.ant.classpath}"/>
            <echo message="Launching &lt;fx:deploy&gt; task from ${ant-javafx.jar.location}" level="info"/>
            <property name="pp_deploy_dir" value="${jfx.deployment.dir}"/>
            <property name="pp_deploy_fs1" value="lib${file.separator}${javafx.preloader.jar.filename}"/>
            <property name="pp_deploy_fs2" value="lib${file.separator}*.*"/>
            <echo message="deploy_deploy: pp_deploy_dir = ${pp_deploy_dir}"/>
            <echo message="deploy_deploy: pp_deploy_fs1 = ${pp_deploy_fs1}"/>
            <echo message="deploy_deploy: pp_deploy_fs2 = ${pp_deploy_fs2}"/>
            <echo message="JavaScript: deploy-deploy" level="verbose"/>
            <basename property="jfx.deployment.base" file="${jfx.deployment.jar}" suffix=".jar"/>
            <script language="javascript">
                <![CDATA[
                    function isTrue(prop) {
                        return prop != null && 
                           (prop.toLowerCase()=="true" || prop.toLowerCase()=="yes" || prop.toLowerCase()=="on");
                    }                    
                    function prefix(s, len) {
                        if(s == null || len <= 0 || s.length == 0) {
                            return new String("");
                        }
                        return new String(s.substr(0, len));
                    }
                    function replaceSuffix(s, os, ns) {
                        return prefix(s, s.indexOf(os)).concat(ns);
                    }
                    function startsWith(s, prefix) {
                        return (s != null) && (s.indexOf(prefix) == 0);
                    }
                    function endsWith(s, suffix) {
                        var i = s.lastIndexOf(suffix);
                        return  (i != -1) && (i == (s.length - suffix.length));
                    }
                    function defined(s) {
                        return (s != null) && (s != "null") && (s.length > 0);
                    }
                    function contains(array, prop) {
                        for (var i = 0; i < array.length; i++) {
                            var s1 = new String(array[i]);
                            var s2 = new String(prop);
                            if( s1.toLowerCase() == s2.toLowerCase() ) {
                                return true;
                            }
                        }
                        return false;
                    }
                    var S = java.io.File.separator;
                    var JFXPAR = "javafx.param";
                    var JFXPARN = "name";
                    var JFXPARV = "value";
                    var JFXPARH = "hidden";
                    var JFXCALLB = "javafx.jscallback";
                    var JFXLAZY = "download.mode.lazy.jar";
                    var withpreloader = new String(project.getProperty("particletrieur-with-preloader"));
                    var fx_ant_api_1_1 = new String(project.getProperty("have-fx-ant-api-1.1"));
                    var fx_ant_api_1_2 = new String(project.getProperty("have-fx-ant-api-1.2"));
                    var have_jdk_pre7u14 = new String(project.getProperty("have-jdk-pre7u14"));
                    var fx_in_swing_app = new String(project.getProperty("fx-in-swing-particletrieur"));
                    var debug_in_browser = new String(project.getProperty("project.state.debugging.in.browser"));

                    // get jars with lazy download mode property set
                    function getLazyJars() {
                        var jars = new Array();
                        var keys = project.getProperties().keys();
                        while(keys.hasMoreElements()) {
                            var pn = new String(keys.nextElement());
                            if(startsWith(pn, JFXLAZY)) {
                                var fname = pn.substring(JFXLAZY.length+1);
                                jars.push(fname);
                            }
                        }
                        return jars.length > 0 ? jars : null;
                    }
                    // set download mode of dependent libraries
                    function setDownloadMode(fsEager, fsLazy, jars) {
                        for(var i = 0; i < jars.length; i++) {
                            fsEager.setExcludes("lib" + S + jars[i]);
                            fsLazy.setIncludes("lib" + S + jars[i]);
                        }
                    }
                    // convert path to absolute if relative
                    function derelativizePath(path) {
                        var f = new java.io.File(path);
                        if(!f.exists()) {
                            f = new java.io.File(new String(project.getBaseDir()) + S + path);
                        }
                        if(f.exists()) {
                            try {
                                return f.getCanonicalPath();
                            } catch(err) {
                                return path;
                            }
                        }
                        return path;
                    }
                    
                    // fx:deploy
                    var deploy = project.createTask("fx_deploy");
                    deploy.setProject(project);
                    var width = new String(project.getProperty("javafx.width"));
                    var height = new String(project.getProperty("javafx.height"));
                    var outdir = new String(project.getProperty("jfx.deployment.dir"));
                    var embedJNLP = new String(project.getProperty("javafx.deploy.embedJNLP"));
                    var updatemode = new String(project.getProperty("update-mode"));
                    var outfile = new String(project.getProperty("application.title"));
                    var includeDT = new String(project.getProperty("javafx.deploy.includeDT"));
                    var offline = new String(project.getProperty("javafx.deploy.allowoffline"));
                    if (width.indexOf("%") != -1) {
                        deploy.setEmbeddedWidth(width);
                        deploy.setWidth(800);
                    } else {
                        deploy.setWidth(width);
                    }
                    if (height.indexOf("%") != -1) {
                        deploy.setEmbeddedHeight(height);
                        deploy.setHeight(600);
                    } else {
                        deploy.setHeight(height);
                    }
                    deploy.setOutdir(outdir);
                    deploy.setEmbedJNLP(isTrue(embedJNLP));
                    deploy.setUpdateMode(updatemode);
                    deploy.setOutfile(outfile);
                    deploy.setIncludeDT(isTrue(includeDT));
                    if(defined(offline)) {
                        if(isTrue(fx_ant_api_1_1)) {
                            deploy.setOfflineAllowed(isTrue(offline));
                        } else {
                            print("Warning: offlineAllowed not supported by this version of JavaFX SDK deployment Ant task. Please upgrade JavaFX to 2.0.2 or higher.");
                        }
                    }
                    // native packaging (time consuming, thus applied in explicit build only)
                    var nativeEnabled = new String(project.getProperty("do.build.native.package"));
                    var nativeType = new String(project.getProperty("javafx.native.bundling.type"));
                    var projStateRun = new String(project.getProperty("project.state.running"));
                    var projStateDbg = new String(project.getProperty("project.state.debugging"));
                    var projStatePrf = new String(project.getProperty("project.state.profiling"));
                    if(isTrue(nativeEnabled) && defined(nativeType) && nativeType != "none") {
                        if(!isTrue(projStateRun) && !isTrue(projStateDbg) && !isTrue(projStatePrf)) {
                            if(isTrue(fx_ant_api_1_2)) {
                                deploy.setNativeBundles(nativeType);
                                print("Note: To create native bundles the <fx:deploy> task may require external tools. See JavaFX 2.2+ documentation for details.");
                                print("");
                                print("Launching <fx:deploy> in native packager mode...");
                            } else {
                                print("Warning: Native packaging is not supported by this version of JavaFX SDK deployment Ant task. Please upgrade to JDK 7u6 or higher.");
                            }
                        }
                    }

                    // fx:application
                    var particletrieur = deploy.createApplication();
                    particletrieur.setProject(project);
                    var title = new String(project.getProperty("application.title"));
                    var mainclass;
                    if(isTrue(fx_in_swing_app) && isTrue(fx_ant_api_1_2)) {
                        mainclass = new String(project.getProperty("main.class"));
                        particletrieur.setToolkit("swing");
                    } else {
                        mainclass = new String(project.getProperty("javafx.main.class"));
                    }
                    var fallback = new String(project.getProperty("javafx.fallback.class"));
                    particletrieur.setName(title);
                    particletrieur.setMainClass(mainclass);
                    particletrieur.setFallbackClass(fallback);
                    if(isTrue(withpreloader)) {
                        preloaderclass = new String(project.getProperty("javafx.preloader.class"));
                        particletrieur.setPreloaderClass(preloaderclass);
                    }
                    var appversion = new String(project.getProperty("javafx.application.implementation.version"));
                    if(defined(appversion)) {
                        particletrieur.setVersion(appversion);
                    } else {
                        particletrieur.setVersion("1.0");
                    }
                    // fx:param, fx:argument
                    var searchHides = project.getProperties().keys();
                    var hides = new Array();
                    while(searchHides.hasMoreElements()) {
                        // collect all hidden property names
                        var pns = new String(searchHides.nextElement());
                        if(startsWith(pns, JFXPAR) && endsWith(pns, JFXPARN)) {
                            var propns = new String(project.getProperty(pns));
                            var phs = replaceSuffix(pns, JFXPARN, JFXPARH);
                            var proph = new String(project.getProperty(phs));
                            if(isTrue(proph)) {
                                hides.push(propns);
                            }
                         }
                    }
                    var keys = project.getProperties().keys();
                    while(keys.hasMoreElements()) {
                        var pn = new String(keys.nextElement());
                        if(startsWith(pn, JFXPAR) && endsWith(pn, JFXPARN)) {
                            var propn = new String(project.getProperty(pn));
                            if(defined(propn) && !contains(hides, propn)) {
                                var pv = replaceSuffix(pn, JFXPARN, JFXPARV);
                                var propv = new String(project.getProperty(pv));
                                if(defined(propv)) {
                                    var par = particletrieur.createParam();
                                    par.setName(propn);
                                    par.setValue(propv);
                                } else {
                                    if(isTrue(fx_ant_api_1_1)) {
                                        var arg = particletrieur.createArgument();
                                        arg.addText(propn);
                                    } else {
                                        print("Warning: Unnamed parameters not supported by this version of JavaFX SDK deployment Ant tasks. Upgrade JavaFX to 2.0.2 or higher.");
                                    }
                                }
                            }
                        }
                    }
                    
                    // fx:resources
                    var res = deploy.createResources();
                    res.setProject(project);
                    var deploydir = new String(project.getProperty("pp_deploy_dir"));
                    if(isTrue(withpreloader)) {
                        var f1 = res.createFileSet();
                        f1.setProject(project);
                        f1.setDir(new java.io.File(deploydir));
                        var i1 = new String(project.getProperty("pp_deploy_fs1"));
                        f1.setIncludes(i1);
                        f1.setRequiredFor("preloader");
                        var f2 = res.createFileSet();
                        f2.setProject(project);
                        f2.setDir(new java.io.File(deploydir));
                        var i2a = new String(project.getProperty("jfx.deployment.jar"));
                        var i2b = new String(project.getProperty("pp_deploy_fs2"));
                        var e2c = new String(project.getProperty("pp_deploy_fs1"));
                        f2.setIncludes(i2a);
                        f2.setIncludes(i2b);
                        f2.setExcludes(e2c);
                        f2.setRequiredFor("startup");
                        var lazyjars = getLazyJars();
                        if(lazyjars != null) {
                            var f3 = res.createFileSet();
                            f3.setProject(project);
                            f3.setDir(new java.io.File(deploydir));
                            f3.setRequiredFor("runtime");
                            setDownloadMode(f2,f3,lazyjars);
                        }
                    } else {
                        var fn = res.createFileSet();
                        fn.setProject(project);
                        fn.setDir(new java.io.File(deploydir));
                        var ia = new String(project.getProperty("jfx.deployment.jar"));
                        var ib = new String(project.getProperty("pp_deploy_fs2"));
                        fn.setIncludes(ia);
                        fn.setIncludes(ib);
                        fn.setRequiredFor("startup");
                        var lazyjars = getLazyJars();
                        if(lazyjars != null) {
                            var fn2 = res.createFileSet();
                            fn2.setProject(project);
                            fn2.setDir(new java.io.File(deploydir));
                            fn2.setRequiredFor("runtime");
                            setDownloadMode(fn,fn2,lazyjars);
                        }
                    }
                    
                    // fx:info
                    var info = deploy.createInfo();
                    info.setProject(project);
                    var vendor = new String(project.getProperty("application.vendor"));
                    var description = new String(project.getProperty("application.desc"));
                    info.setTitle(title); // title known from before
                    info.setVendor(vendor);
                    info.setDescription(description);
                    var splash = new String(project.getProperty("javafx.deploy.splash"));
                    if(defined(splash)) {
                        if(isTrue(fx_ant_api_1_1)) {
                            var sicon = info.createSplash();
                            sicon.setHref(splash);
                            sicon.setMode("any");
                            print("Adding splash image reference: " + splash);
                        } else {
                            print("Warning: Splash Image not supported by this version of JavaFX SDK deployment Ant task. Please upgrade JavaFX to 2.0.2 or higher.");
                        }
                    }
                    if(isTrue(nativeEnabled) && defined(nativeType) && nativeType != "none") {
                        var icon = new String(project.getProperty("javafx.deploy.icon.native"));
                        if(defined(icon)) {
                            if(isTrue(fx_ant_api_1_2) && !isTrue(have_jdk_pre7u14)) {
                                var dicon = derelativizePath(icon);
                                // create temporary icon copy renamed to application name (required by native packager)
                                var baseDir = new String(project.getProperty("basedir"));
                                var buildDir = new String(project.getProperty("build.dir"));
                                var deployBase = new String(project.getProperty("jfx.deployment.base"));
                                var copyTask = project.createTask("copy");
                                var source = new java.io.File(dicon);
                                var sourceName = new String(source.getName());
                                var lastDot = sourceName.lastIndexOf(".");
                                var sourceExt;
                                if(lastDot >=0) {
                                    sourceExt = sourceName.substr(lastDot);
                                } else {
                                    sourceExt = new String("");
                                }
                                var target = new java.io.File(baseDir.concat(S).concat(buildDir).concat(S).concat("icon").concat(S).concat(deployBase).concat(sourceExt));
                                copyTask.setFile(source);
                                copyTask.setTofile(target);
                                copyTask.setFlatten(true);
                                copyTask.setFailOnError(false);
                                copyTask.perform();
                                var tempicon;
                                if(target.exists()) {
                                    try {
                                        tempicon = target.getCanonicalPath();
                                    } catch(err) {
                                        tempicon = dicon;
                                    }
                                } else {
                                    tempicon = dicon;
                                }
                                var nicon = info.createIcon();
                                nicon.setHref(tempicon);
                                print("Source native icon reference: " + dicon);
                                print("Processed native icon reference: " + tempicon);
                            } else {
                                print("Warning: Native Package icon not supported by this version of JavaFX SDK deployment Ant task. Please upgrade to JDK7u14.");
                            }
                        }
                    } else {
                        var icon = new String(project.getProperty("javafx.deploy.icon"));
                        if(defined(icon)) {
                            if(isTrue(fx_ant_api_1_1)) {
                                var iicon = info.createIcon();
                                iicon.setHref(icon);
                                print("Adding WebStart icon reference: " + icon);
                            } else {
                                print("Warning: WebStart Icon not supported by this version of JavaFX SDK deployment Ant task. Please upgrade JavaFX to 2.0.2 or higher.");
                            }
                        }
                    }
                    
                    // fx:permissions
                    var perm = deploy.createPermissions();
                    perm.setProject(project);
                    var elev = new String(project.getProperty("permissions.elevated"));
                    perm.setElevated(isTrue(elev));
                    
                    // fx:preferences
                    var pref = deploy.createPreferences();
                    pref.setProject(project);
                    var scut = new String(project.getProperty("javafx.deploy.adddesktopshortcut"));
                    var instp = new String(project.getProperty("javafx.deploy.installpermanently"));
                    var smenu = new String(project.getProperty("javafx.deploy.addstartmenushortcut"));
                    pref.setShortcut(isTrue(scut));
                    pref.setInstall(isTrue(instp));
                    pref.setMenu(isTrue(smenu));

                    // fx:template
                    var templ = new String(project.getProperty("javafx.run.htmltemplate"));
                    var templp = new String(project.getProperty("javafx.run.htmltemplate.processed"));
                    if(defined(templ) && defined(templp)) {
                        var temp = deploy.createTemplate();
                        temp.setProject(project);
                        temp.setFile(new java.io.File(templ));
                        temp.setTofile(new java.io.File(templp));
                    }

                    // fx:platform
                    var plat = deploy.createPlatform();
                    plat.setProject(project);
                    var requestRT = new String(project.getProperty("javafx.deploy.request.runtime"));
                    if(defined(requestRT)) {
                        plat.setJavafx(requestRT);
                    }
                    var jvmargs = new String(project.getProperty("run.jvmargs"));
                    if(defined(jvmargs)) {
                        var jvmargss = jvmargs.split(" ");
                        for(var i = 0; i < jvmargss.length; i++) {
                            if(defined(jvmargss[i])) {
                                var vmarg = plat.createJvmarg();
                                vmarg.setValue(jvmargss[i]);
                            }
                        }
                    }
                    if(isTrue(debug_in_browser)) {
                        var vmarg = plat.createJvmarg();
                        vmarg.setValue(new String("-ea:javafx.browserdebug"));
                    }
                    if(isTrue(nativeEnabled) && defined(nativeType) && nativeType != "none") {
                        if(!isTrue(projStateRun) && !isTrue(projStateDbg) && !isTrue(projStatePrf)) {
                            if(plat.setBasedir) {
                                var sdkdir = new String(project.getProperty("javafx.sdk"));
                                if(defined(sdkdir)) {
                                    plat.setBasedir(sdkdir);
                                }
                            } else {
                                print("Note: the current version of native packager Ant task can bundle the default JRE only.");
                            }
                        }
                    }
                    
                    // fx:callbacks
                    var callbs = deploy.createCallbacks();
                    callbs.setProject(project);
                    var keys = project.getProperties().keys();
                    while(keys.hasMoreElements()) {
                        var pn = new String(keys.nextElement());
                        if(startsWith(pn, JFXCALLB)) {
                            var prop = new String(project.getProperty(pn));
                            if(defined(prop)) {
                                var cname = pn.substring(JFXCALLB.length+1);
                                var cb = callbs.createCallback();
                                cb.setProject(project);
                                cb.setName(cname);
                                cb.addText(prop);
                            }
                        }
                    }
                    
                    deploy.perform();
                ]]>
            </script>
            <antcall target="-post-jfx-deploy"/>
            <antcall target="-call-post-jfx-native"/>
        </sequential>
    </macrodef>
    </target>
    

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. Those of them relevant for JavaFX particletrieur are:

      -pre-init:                 called before initialization of particletrieur properties
      -post-init:                called after initialization of particletrieur properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-jfx-jar:              called before FX SDK specific <fx:jar> task
      -post-jfx-jar:             called after FX SDK specific <fx:jar> task
      -pre-jfx-deploy:           called before FX SDK specific <fx:deploy> task
      -post-jfx-deploy:          called after FX SDK specific <fx:deploy> task
      -pre-jfx-native:           called just after -pre-jfx-deploy if <fx:deploy> runs in native packaging mode
      -post-jfx-native:          called just after -post-jfx-deploy if <fx:deploy> runs in native packaging mode
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting a HTML postprocessor after javaFX SDK deployment:

        <target name="-post-jfx-deploy">
            <basename property="jfx.deployment.base" file="${jfx.deployment.jar}" suffix=".jar"/>
            <property name="jfx.deployment.html" location="${jfx.deployment.dir}${file.separator}${jfx.deployment.base}.html"/>
            <custompostprocess> 
            </custompostprocess>
        </target>

    Example of calling an Ant task from JavaFX SDK. Note that access to JavaFX SDK Ant tasks must be
    initialized; to ensure this is done add the dependence on -check-jfx-sdk-version target:

        <target name="-post-jfx-jar" depends="-check-jfx-sdk-version">
            <echo message="Calling jar task from JavaFX SDK"/>
            <fx:jar ...>
                ...
            </fx:jar>
        </target>

    For more details about JavaFX SDK Ant tasks go to
    http://docs.oracle.com/javafx/2/deployment/jfxpub-deployment.htm

    For list of available properties check the files
    nbproject/build-impl.xml and nbproject/jfx-impl.xml.

    -->
    

    
</project>
